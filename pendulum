#!/usr/bin/env zsh
#
# Copyright (C) 2016 Dyne.org Foundation
#
# Designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.

# This standalone program runs every N seconds and gathers current
# information on network objects, updating it in redis


source /usr/local/dowse/zshrc

[[ -r $H/run/redis-server.pid ]] || {
	error "Dowse is not running"
	error "pid not found: $H/run/redis-server.pid"
	return 1 }

# gather_network_info fills in global maps
net_devices=()
net.scan_devices
net_ip4_addr=()
net.scan_addresses

now=`date --utc +'%s'`

pendulum_ip_to_network() {
    fn pendulum_ip_to_network $*
    local _addr="$1"
    req=(_addr)
    ckreq || return $?
    print "${_addr[(ws:.:)1]}.${_addr[(ws:.:)2]}.${_addr[(ws:.:)3]}.0/24"
}


_pendulum_resolve_hostname() {
    fn pendulum_resolve_hostname $*
    [[ "$obj[ip4]" = "" ]] && return 1

    hh="`host $obj[ip4] | awk '
/NXDOMAIN/ { exit }
{ print $NF }'`"
    # hh[${#hh}]='\0'
    [[ "$hh" = "" ]] || {
        obj[hostname]=${hh%%.*}
    }
}

_pendulum_commit_changes() {
    fn pendulum_commit_changes $*
    [[ "$sqlquery" = "" ]] && return 0

    print - "$sqlquery" | $sql $db[things]

    sqlquery=""
}

_pendulum_update_changes() {
    fn pendulum_update_changes $*
    macaddr="$obj[macaddr]"
    req=(macaddr)
    ckreq || return $?

    [[ "$macaddr" = "NULL"     ]] && return 1
    [[ "$macaddr" = "FAILED"     ]] && return 1
    [[ "$macaddr" = "INCOMPLETE" ]] && return 1

    local info
    info=`print - "SELECT * from found where macaddr = '$obj[macaddr]';" | $sql $db[things]`

    local nownow
    nownow=`date --utc '+%Y-%m-%dT%H:%M:%S'`

    local name
    name=${obj[hostname]}

    if [[ ${#info} = 0 ]]; then
        act "new: ${obj[macaddr]} ${obj[hostname]:-${obj[ip4]}} :: ${obj[os]}"
        # no records found, this is a new one

        sqlquery+="
INSERT IGNORE into found (macaddr,ip4,iface,hostname,state,last,age)
values('$obj[macaddr]','$obj[ip4]','$obj[iface]','$obj[hostname]','$obj[state]','$nownow','$nownow');"


        # TODO: send event to redis
        continue
    else
        sqlquery+="
UPDATE found SET last = '$nownow' WHERE macaddr = '$obj[macaddr]';"
    fi

    # check all changes on each property one by one
    for i in "${(f)$(print $info | sql_idx_parse $R/db/thing.idx)}"; do
        [[ "$i" = "" ]] && continue
        # tokenize for easier handling
        strtok "$i" ' '
        _k="${tok[1]}"

        # skip if new object scan contains NULL info
        [[ "${obj[$_k]}"  = "NULL" ]] && continue

        # skip last here because we always update it
        [[ "$_k" = "last" ]] && continue

        # skip macaddr since its the identifier
        [[ "$_k" = "macaddr" ]] && continue

        tok[1]=()
        # shift in case values contain more than one string with spaces
        _v="${tok}"


        [[ "$obj[$_k]" = "" ]] || { # key is defined in object
            func "$_k = $_v -> $obj[$_k] "

            [[ "$obj[$_k]" = "$_v" ]] || {
                # values differ

                # TODO: send events to redis
                warning "$name change $_k: $_v -> $obj[$_k]"

                # update in database
                sqlquery+="
UPDATE found SET $_k = '$obj[$_k]' WHERE macaddr = '$obj[macaddr]';"

            }

            # delete from object as done
            obj[$_k]=""
        }
    done


    # for _k in ${(k)obj}; do
    #     act "analysis $_k = $obj[$_k]"
    # done

    # update all informations that are left in object
    for _k in ${(k)obj}; do

        [[ "$_k" = "macaddr" ]] && continue
        [[ "${obj[$_k]}" = "" ]] && continue

        warning "leftover: $_k = $obj[$_k]"
        sqlquery+="
UPDATE found SET $_k = '$obj[$_k]' WHERE macaddr = '$obj[macaddr]';"
    done


}

# finds out LAN neighbours, their mac and their state
# this establishes mac addresses as indexes
pendulum_ip_neigh() {
    fn pendulum_ip_neigh $*

	ip neigh | parse-ip-neigh

}

watchdog_daemons() {
	# map all running pids
	# for p in ${(f)"$(ps -o pid ax)"}; do
	# 	[[ "$p" =~ "PID" ]] && continue
	# 	pidmap+=($p 1)

	# done
	# act "${#pidmap} pids found running"

	# generic restart of any daemon that has left pids behind
	for d in ${(f)"$(find $H/run -name '*.pid')"}; do
		func "watchdog: $d"
		# remove path prefix
		daemon=${d##*/}
		# remove .pid postfix
		daemon=${daemon%.*}
		func "daemon: $daemon"

		[[ "$daemon" = "seccrond" ]] && {
			func "watchdog skip seccrond parent"
			continue }

		pid=`cat $d`
		[[ "$pid" = "" ]] && {
			err="$d pidfile found empty"
			error $err
			print $err >> $H/log/watchdog.log
			continue
		}
		act "$pid \t $daemon"
		if [[ -r /proc/${pid}/stat ]]; then
			[[ $DEBUG = 1 ]] && {
				func "found running: $daemon"
				func "`cat /proc/$pid/cmdline`"
			}

		else
			err="$daemon not found running (crash?)"
			error $err
			print $err >> $H/log/watchdog.log
			# delete old pid
			rm -f $d
			act "attempting restart: $daemon"
			start $daemon
			if [[ $? = 0 ]]; then
				err="succesfully restarted: $daemon"
				notice $err
				print $err >> $H/log/watchdog.log
			else
				err="watchdog fails to restart: $daemon"
				error $err
				print $err >> $H/log/watchdog.log
			fi
		fi
	done

	# daemons that should always be running
	core_daemons=(redis-server dnscrypt-proxy)
	for d in $core_daemons; do
		pidfile=$H/run/$d.pid
		[[ -r $pidfile ]] || {
			start $d
			if [[ $? = 0 ]]; then
				err="succesfully restarted: $daemon"
				notice $err
				print $err >> $H/log/watchdog.log
			else
				err="watchdog fails to restart: $daemon"
				error $err
				print $err >> $H/log/watchdog.log
			fi
		}
	done
}

exec_next_cmd() {
	fn exec_next_cmd $*
	local cmd
	cmd=`launch dowse-cmd-fifo`
	[[ "$cmd" = "" ]] && return 1

	# all uppercase
	cmd=$cmd:u
	func "cmd: $cmd"

	# check if valid command (prefix CMD)
	[[ "${cmd[1,4]}" = "CMD," ]] || {
		error "invalid command: $cmd"
		return 1 }

	# TODO: ACL check if IP (2nd field) is authorised

	local action
	action=${cmd[(ws:,:)3]}
	[[ "$action" = "" ]] && {
		error "no action found: $cmd"
		return 1 }
	func "action: $action"
	epoch=${cmd[(ws:,:)4]}
	func "ackid we use epoch: $epoch" 

	# set acl on/off switch matching the action
	acl=DROP
	[[ "$action" =~ "THING_ON"  ]] && { acl=ACCEPT ; old_acl=DROP ;}
	[[ "$action" =~ "THING_OFF" ]] && { acl=DROP ; old_acl=ACCEPT;}

	case $action in
	    ALL_THINGS_OFF)
		# 5th arg is the admin macaddress to NOT disable
		local mac_admin
		mac_admin=${cmd[(ws:,:)5]}
		[[ "$mac_admin" = "" ]] && {
		    error "invalid mac admin address: $mac_admin"
		    return 1 }

		ip_admin=${cmd[(ws:,:)2]}
		[[ "$ip_admin" = "" ]] && {
		    error "invalid ip admin address: $ip_admin"
		    return 1 }

		mac_wan=`/usr/sbin/arp -en| egrep "\b$wan\b"| awk '{print $3}'`
		[[ "$mac_wan" = "" ]] && {
		    error " mac address of IP router : $wan is invalid : $mac_wan"
		    return 1 }

		# TODO: check if valid mac address
		launch ebtables -F
		launch ebtables -A FORWARD -s $mac_admin  -j ACCEPT
		launch ebtables -A FORWARD -s $mac_wan  -j ACCEPT
		launch ebtables -A FORWARD -d $mac_admin  -j ACCEPT
		launch ebtables -A FORWARD -d $mac_wan  -j ACCEPT
		launch ebtables -A FORWARD -j DROP
		save_ebtables

		cat <<EOF | $sql $db[things]
UPDATE found SET authorized='DISABLE_TO_BROWSE'
WHERE ( '$ip_admin' not in (ip4 , ip6))
EOF

				cat <<EOF | $sql $db[things]
UPDATE parameter SET value='OFF' WHERE variable='state all things'
EOF

		# Delete the ACK request
		print "DEL ACK_${action}_$epoch" | redis dynamic
		
		;; 
	    ALL_THINGS_ON)

		# TODO: check if valid mac address
		launch ebtables -F
		launch ebtables -A FORWARD -j ACCEPT
		save_ebtables


		cat <<EOF | $sql $db[things]
UPDATE found SET authorized='ENABLE_TO_BROWSE'
EOF

		cat <<EOF | $sql $db[things]
UPDATE parameter SET value='ON' WHERE variable='state all things'
EOF

		
		# Delete the ACK request
		print "DEL ACK_${action}_$epoch" | redis dynamic
		
		;; 

	    THING_OFF|THING_ON)
			# 1st arg is the ip to block
			local macb
			macb=${cmd[(ws:,:)5]}
			# on/off string lowercase for db
			local al
			al=${action[(ws:_:)2]:l}

			[[ "$macb" = "" ]] && {
				error "invalid mac block cmd: $cmd"
				return 1 }
			# TODO: check if valid mac address
			func "# delete old rule"
			launch ebtables -D FORWARD -s $macb -j $old_acl 
			launch ebtables -D FORWARD -d $macb -j $old_acl 

			func "ebtables -I FORWARD 1 -s $macb -j $acl"
			func "ebtables -I FORWARD 1 -d $macb -j $acl"
			func "# add new rule"
			launch ebtables -I FORWARD 1 -s $macb -j $acl
			launch ebtables -I FORWARD 1 -d $macb -j $acl

			save_ebtables
			# launch xtables-multi iptables -A FORWARD -s $ipb -j $acl
			# launch xtables-multi iptables -A FORWARD -d $ipb -j $acl
			if [[ "$al" = "on" ]]; then
			    AUTH="ENABLE_TO_BROWSE"
			else
			    AUTH="DISABLE_TO_BROWSE"
			fi
			cat <<EOF | $sql $db[things]
UPDATE found SET authorized='$AUTH'
WHERE (macaddr='$macb' and '$macb' <> '');
EOF

			# Delete the ACK request
			print "DEL ACK_${action}_$epoch" | redis dynamic

			;;

		# IP6_OFF|IP6_ON)
		# 	# 1st arg is the ip to block
		# 	ipb=${cmd[(ws:,:)5]}
		# 	[[ "$ipb" = "" ]] && {
		# 		error "invalid ip6block cmd: $cmd"
		# 		return 1 }
		# 	# TODO: check if valid ip6 ip
		# 	launch xtables-multi ip6tables -A FORWARD -s $ipb -j $acl
		# 	launch xtables-multi ip6tables -A FORWARD -d $ipb -j $acl

		# MAC_OFF|MAC_ON)
		# 	# 1st arg is the mac to block
		# 	macb=${cmd[(ws:,:)5]}
		# 	[[ "$macb" = "" ]] && {
		# 		error "invalid macblock cmd: $cmd"
		# 		return 1 }
		# 	# TODO: check if valid mac
		# 	launch ebtables -A FORWARD -s $macb -j $acl
		# 	launch ebtables -A FORWARD -d $macb -j $acl

		DOMAIN_OFF|DOMAIN_ON)
			error "TODO: domainblock command"
		;;
		*)
			error "unknown action: $cmd"
			;;
	esac

	return 0
}


# DNS functions

#=======================================
# Code for check DNS availability
#=======================================

# multiple lock
m_lock () {
    local _lock_name="$1"
    local _val_to_loc="$2"

    _sem="m_lock_$1"
    _val="$2"

    RV=$(print "SET ${_sem} ${_val} NX" | redis runtime )

   
    [[ "$RV" = "OK" ]] && return 0;

    return 1
}


m_unlock () {
    local _sem="m_lock_$1"
    local _val="$2"
#    print "DECRBY $_sem $_val "
    eval "NV=$(print "DECRBY $_sem $_val " | redis runtime)"
    func " m_unlock : NV = $NV"
    
    [[ $NV = "0" ]] && {
	_tmp=$(print "DEL $_sem " | redis runtime )
	return 0 }


    func " m_unlock : after DECRBY NV = $NV"
    return 0
}


search_for_a_dns () {
    func "$! spawned search_for_a_dns R=[$R]"
    #
    sed 1q $R/share/dnscrypt-resolvers.csv > $R/share/dnscrypt-resolvers-grepped.csv
    grep $servertype $R/share/dnscrypt-resolvers.csv >> $R/share/dnscrypt-resolvers-grepped.csv
    
    # prints a random line from the resolvers csv file
    local _rndresolv="$(perl -wne '$a = $_ if rand $. < 1 ; END { print $a }' $R/share/dnscrypt-resolvers-grepped.csv)"
    
    func " $$   # check if DNS is reachable"
    __is_dns_reachable ${_rndresolv[(ws:,:)1]}
    
    [[ $? = 0 ]] || {
	act "$$ : no good news from ${_rndresolv}"
	m_unlock check_and_select_dns 1
	return 0
    }
    dnscrypt_name="${_rndresolv[(ws:,:)1]}"

    func "dnscrypt_name = ${dnscrypt_name}"
    # Saving on redis the dnscrypt_name
    act "$! > GOOD NEWS from ${_rndresolv}"
    print "SET dns-server-selected ${dnscrypt_name}" | redis dynamic
    
    rm -f $R/share/dnscrypt-resolvers-grepped.csv

#    PID_LIST=$(print "GET dnscrypt-pid-child-list " | redis dynamic | tr '_' ' ')

    PID_LIST=$(print "GET dnscrypt-pid-child-list " | redis dynamic)
    pid_array=("${(@s/_/)PID_LIST}")
    LOCK=$(print "GET lock_check_and_select_dns" | redis dynamic )

    act " restarting dnscrypt-proxy "
    stop dnscrypt-proxy
    start dnscrypt-proxy
    
    func " unlocking check_and_select_dns [$LOCK]"
    # in this moment we can unlock the semaphore if the pendulum spawn another team it don't change our  PID_LIST variable
    m_unlock check_and_select_dns 1

#    for i in $pid_array ; do
#	echo $i
#	ps aux|grep $i
#	kill -9 ${i}
#    done

}


__is_dns_reachable() {
     [[ $1 = "(nil)" ]] && { return 1 }
     [[ $1 = "" ]] && { return 1 }
     [[ $1 = " " ]] && { return 1 }

     act " Checking if dns  [$1] is reachable"

     LOG_MODE=1
     
     [[ $DEBUG = 1 ]] && {
	 LOG_MODE=7
     }
     
     eval "${execmap[dnscrypt-proxy]} -L $R/share/dnscrypt-resolvers.csv -R $1 -t 720 -m $LOG_MODE"
     
     rv=$?
     [[ $rv = 0 ]] || { error "DNS [$1] is not reachable" }

    return $rv
}

 check_and_select_dns() {

     let nlock=$(grep -c processor /proc/cpuinfo )/2
	
     if [[ $nlock < 1 ]]; then
	 let nlock=1;
     fi
     
     func ""
     func "entering dnscrypt-check_and_select_dns()"
     func "nlock=$nlock"
     eval "m_lock check_and_select_dns $nlock"
     [[ $? = 1 ]] && {
	 error "lock check_and_select_dns already locked"
	 return 1 }


     #local servertype=",.,yes,yes" ## DNSSEC + No logs
     #local servertype=",.,yes,no"  ## DNSSEC
     local servertype=",.,no,yes"  ## No logs
    
    act "Check if the DNS selected on the Redis server is available"
    
    DNS=$(print "GET dns-server-selected" | redis dynamic)

    func "DNS = ${DNS} "    
    __is_dns_reachable $DNS ;
    if [[ $? = 0 ]]; then
	act "Ok ! DNS is reachable"
	eval "m_unlock check_and_select_dns $nlock"
    else
	warn "DNS nil or not reachable"
	print "DEL dns-server-selected" | redis dynamic
	
	warn "Choosing a random available dnscrypt server"
#	spawn dns selection

	func " spawning search [nlock=$nlock]"
	for i in $(seq 1 $nlock ); do
	    search_for_a_dns &
	done
	
	#	Save child pid on redis
	PID_LIST=""
	for i in ${${(v)jobstates##*:*:}%=*} ; do
	    PID_LIST+="_"$i
	done

	func " Saving child list on redis [$PID_LIST]"
	print "SET dnscrypt-pid-child-list $PID_LIST" | redis dynamic
    fi

}



################
# MAIN functions


fn "pendulum $*"

case "$1" in

	watchdog)
		wlid=`lock watchdog 60`
		[[ $wlid = 0 ]] && {
			func "watchdog already running"
			return 1 }

		# check that all registered pids are running
		# restart them if not running (and log that)
		pidmap=()
		watchdog_daemons

		unlock watchdog $wlid
		;;

	nextcmd)
		ncmd=`lock nextcmd 0`
		[[ "$ncmd" = "0" ]] && {
			func "nextcmd already locked"
			return 1 }

		exec_next_cmd
		
		unlock nextcmd $ncmd

		;;

	lease)
		# called by dhcp daemon when adding a new lease
		print "PUBLISH dhcp-lease-channel $*" | redis dynamic
		# shift 1
		return 0
		;;

	nmap)
		nlock=`lock nmap 30`
		# [[ $nlock = 0 ]] && {
		# 	func "nmap already running"
		# 	return 1 }

		nmapfile=$H/run/nmap_scan.xml
		ztmp
		processedfile=$ztmpfile

		ztmp
		varfile=$ztmpfile

		notice "Starting nmap scap of $dowse_net"
		act "results saved in $nmapfile"

 		sup nmap -n -F -sS -oX $nmapfile $dowse_net

		nmap-preprocess
		nmap-parse

		rm -f "${varfile}"
		rm -f "${processedfile}"

		#		unlock nmap $nlock
		;;

    netscan)
		slid=`lock netscan 30`
		[[ $? = 0 ]] || {
			func "netscan already running"
			return 1 }

        # parse everything in this map
        obj=()
        pendulum_ip_neigh
        # pendulum_arp_scan
        _pendulum_commit_changes

		unlock netscan $slid
        ;;

    check_and_select_dns)
	check_and_select_dns
	return 0
	;;
    procscan)
        # TODO: pgrep
        ;;
esac
