#!/usr/bin/env zsh
#
# Copyright (C) 2012-2016 Dyne.org Foundation
#
# Designed, written and maintained by Denis Roio <jaromil@dyne.org>
#
# This source code is free software; you can redistribute it
# and/or modify it under the terms of the GNU Public License
# as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later
# version.
#
# This source code is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE.  Please refer to the GNU Public License for more
# details.
#
# You should have received a copy of the GNU Public License
# along with this source code; if not, write to: Free
# Software Foundation, Inc., 675 Mass Ave, Cambridge, MA
# 02139, USA.

# load development libraries if there
if [[ -r `pwd`/zlibs/zuper-dev/zuper ]]; then
    func "Zuper loaded from development symlink"
    source `pwd`/zlibs/zuper-dev/zuper
else source `pwd`/zlibs/zuper; fi

# {{{ GLOBALS

dowse_version=0.9
dowse_release_date="Apr/2016"

zkv=1
restful=1
helpers=1

# export DOWSE_PREFIX and DOWSE_HOME to override
R=${DOWSE_PREFIX:-/usr/local/dowse}
H=${DOWSE_HOME:-$HOME/.dowse}
E=${DOWSE_CONF:-/etc/dowse}

[[ -r $R ]] || {
    error "Dowse is not installed in: $R"
    error "export DOWSE_PREFIX if installed on a different path"
    return 1
}

# add all other dowse binaries to the path
path+=($R/bin)
rehash

mkdir -p $H

# For gettext
TEXTDOMAIN=dowse

# path and debugging
vars+=(R H E debug quiet script fun settings network)
vars+=(last_notice last_act last_func)
vars+=(root sql)
arrs+=(mods)

# use sqlite
sql="sqlite3"

# export DOWSE to env with path to the installation
# else start it from inside the dir with source dowse
DEBUG=${DEBUG:-0}
QUIET=${QUIET:-0}
LOG=${LOG:-""}


# globals filled by lease parser
arrs+=(host mac ip)

# globals used when loading modules
# vars+=(dowse_mod_name dowse_mod_desc dowse_mod_version)
# arrs+=(dowse_mod_type dowse_mod_ports dowse_mod_deps)
# arrs+=(dowse_mod_authors dowse_mod_tags)
maps+=(dowse_mod)

# consul's configuration map
# maps+=(consul_conf consul_watch)

# redis database indexes
maps+=(db)

# dataset indexes
arrs+=(mod)

# daemons exec paths (OS dependent)
maps+=(execmap execrules)
vars+=(execpath)

# default daemons conf and pids
vars+=(pid conf)

zmodload zsh/system
zmodload zsh/mapfile
zmodload zsh/regex
zmodload zsh/sched
zmodload zsh/system
zmodload zsh/net/tcp

source $R/zlibs/modules
source $R/zlibs/processes
source $R/zlibs/iptables
source $R/zlibs/ebtables
source $R/zlibs/confstore
source $R/zlibs/redis
source $R/zlibs/sql

source $R/daemons/consul
source $R/daemons/dnsmasq
source $R/daemons/squid3
source $R/daemons/privoxy
source $R/daemons/polipo
source $R/daemons/dnscap
source $R/daemons/pgld
source $R/daemons/tor
source $R/daemons/redis
source $R/daemons/dnscrypt-proxy
source $R/daemons/netdata
source $R/daemons/webui

# conclude initialization
if [[ -r $R/zlibs/zuper-dev/zuper.init ]]; then
    source $R/zlibs/zuper-dev/zuper.init
else source $R/zlibs/zuper.init; fi

func "load dataset indexes"
db=()
zkv.load $R/db/database.zkv

func "load paths and execmaps"
execmap=()
source $R/db/execmap.zkv
execrules=()
source $R/db/execrules.zkv

# module fields
mod=(
    name
    desc
    tags
    ports
    webgui
    daemons
    authors
    version
)


if [[ $dowse_loaded = 1 ]]; then
    act "Dowse CLI reloaded ::1::" $dowse_version
    RPROMPT=Dowse
else
    notice "Dowse CLI ::1:: - local area network rabdomancy" $dowse_version
    dowse_loaded=1
    RPROMPT=Dowse
fi

[[ $QUIET = 1 ]] || {
    cat <<EOF

 Copyright (C) 2012-2016 Dyne.org Foundation, License GNU GPL v3+
 This is free software: you are free to change and redistribute it
 For more informations see http://www.dyne.org/software/dowse

EOF
}

# global file path to settings
settings=${1:-/etc/dowse/settings}
conf-load

act "checking requirements to run dowse..."

[[ "$address" = "" ]] && {
    error "Invalid config file"
    zdump
    return 1
}

mkdir -p $H/log
mkdir -p $H/run

_verbose "Dowse command: ::1 commands::" "$*"
_verbose "Caller: uid[::1 uid::], gid[::2 gid::], tty[::3 tty::]." \
         $dowse_uid $dowse_gid $TTY

act "daemons running as user and group $dowse_uid:$dowse_gid"
# [[ -z $root ]] || {
#     # setup dirs
#     chmod go-rwx $H/log
#     chown -R $dowse_uid:$dowse_gid $H/log

#     chmod go-rwx $R/run
#     chown -R $dowse_uid:$dowse_gid $R/run
# }

# func "::1 dir:: directory writable by ::2 uid::" run $dowse_uid
# if touch $R/run/test; then rm -f $R/run/test; else return 1; fi

# func "::1 dir:: directory writable by ::2 uid::" log $dowse_uid
# if touch $H/log/test; then rm -f $H/log/test; else return 1; fi


act "all requirements in place"

fn dowse-running
# }}}



# {{{ MAIN

# Here is most of the hard-coded logic of dowse when starting up
# eventually some of this need to interact, acknowledge or even
# be moved into modules, depending from future developments.
# Meanwhile, special care is taken to keep this readable and
# transparent (avoid wrapping when possible), documenting choices
# with references.
dowse-start() {
    fn dowse-start
    # freq=($R/conf/settings $R/conf/network)
    # ckreq || return $?

    [[ "`getpid redis-server`" = "" ]] || {
        warn "Dowse is already running"
        return 0
    }
    notice "Starting Dowse"

    # start the redis daemon (core k/v service)
    redis-conf > $H/run/redis-server.conf
    cat <<EOF >> $H/run/redis-server.conf
pidfile $H/run/redis-server.pid
logfile $H/log/redis-server.log
port 6379
EOF
    start redis-server

    [[ "$firewall" = "yes" ]] && {

        ebtables-stop
        ebtables-start

        iptables-stop
        iptables-start

        iptables-base-protection

        loopback-on
        if loopback-only; then
            act "dry run on localhost only"
        else
            loopback-isolate

            act "set up $interface interface with ip $address"
            launch ifconfig $interface $address netmask $netmask up

            act "set $wan as default gateway"
            launch route add default gw $wan

            act "setup snat trasversal"
            iptables-snat-on

            # make sure the dowse host uses his own dns
#             mv /etc/resolv.conf /etc/resolv.conf.dowse-backup
#             cat <<EOF > /etc/resolv.conf
# nameserver 127.0.0.1
# # domain $lan
# # search $lan
# EOF
            # this is problematic, we cannot sup mv or cat or tee
            # so perhaps take another approach: fw rule to redirect
            # all traffic to configured dns to our own until is up?
        fi
    }

    # generate the dnsmasq configuration
    dnsmasq-conf > $H/run/dnsmasq.conf

    # tunnel dnsmasq across dnscrypt-proxy
    cat <<EOF >> $H/run/dnsmasq.conf
server=127.0.0.1#53443
EOF

    # launch the dnsmasq daemon
    start dnsmasq

    # start the dns encrypted tunneling
    start dnscrypt-proxy

    # these are root programs that need redis to be running
    start dnscap

    # netdata dashboard for the technical status
    netdata-conf > $H/run/netdata.conf
    start netdata

    mods=`find -L $E/modules/enabled -maxdepth 1 -type d | grep -v 'enabled$'`
    for m in "${(f)mods}"; do
        dowse-module-load $m || continue
        dowse-module-setup || continue
    done

    for m in "${(f)mods}"; do
        dowse-module-load $m || continue
        dowse-module-start || continue
    done

    [[ "$firewall" = "yes" ]] && {
            # start peerguardian (must be at end, after any other
            # iptables setting)
            pgld-conf > $H/run/pgld.conf
            start pgld
    }

    QUIET=1 pendulum start &! savepid pendulum $!

    notice "Dowse succesfully started" # , web interface up on:"
    # act "http://${address}:8500/"

}

dowse-stop() {
    fn dowse-stop

    stop pendulum

    for m in `dowse-module-list`; do

        dowse-module-load $m || continue
        dowse-module-stop

    done

    # stop the dashboard
    stop netdata

    # stop the dns crypto tunnel
    stop dnscrypt-proxy

    # stop the dns capture daemon
    stop dnscap

    # stop the dhcp server
    stop dnsmasq

    # stop the firewall peerguardian
    stop pgld

    # remove the layer 2 firewall rules
    ebtables-stop

    # remove the layer 3 firewall rules
    iptables-snat-off
    iptables-stop

    # restore backup if present
    # [[ -r /etc/resolv.conf.dowse-backup ]] &&  {
    #     mv /etc/resolv.conf.dowse-backup /etc/resolv.conf
    # }

    stop redis-server

    notice "Dowse has stopped running."

}

dowse-reload() {
    fn dowse-reload
    freq=($E/modules/enabled)
    ckreq || return 1

    mods=`find -L $E/modules/enabled -maxdepth 1 -type d | grep -v 'enabled$'`
    func "modules enabled: $mods"
    for m in "${(f)mods}"; do
        dowse-module-load $m || continue
        dowse-module-stop
    done

    for m in "${(f)mods}"; do
        dowse-module-load $m || continue
        dowse-module-setup
    done

    for m in "${(f)mods}"; do
        dowse-module-load $m || continue
        dowse-module-start
    done

}

dowse-parse-leases() {
    awk '
BEGIN { c=0 }
{
  mac[c]=$2
  ip[c]=$3
  if($4=="*") host[c]="anonymous"; else host[c]=$4
zx  c++
}
END {
  printf "mac=("; for(i=0;i<c;i++) { printf "%s ", mac[i] }; printf ")\n"
  printf "ip=("; for(i=0;i<c;i++) { printf "%s ", ip[i] }; printf ")\n"
  printf "host=("; for(i=0;i<c;i++) { printf "%s ", host[i] }; printf ")\n"
}' $H/run/leases
}

dowse-dump() {
    fn dowse-dump

    freq=($H/run/redis.pid)
    ckreq || return $?

    notice "Dumping variables in Redis"
    act "Runtime:"
    print - "KEYS *" | redis runtime | sort
    act "Storage:"
    print - "KEYS *" | redis storage | sort
    act "Dynamic:"
    print - "KEYS *" | redis dynamic | sort
}

dowse-status() {
    fn dowse-status $*
    req=(sql)
    freq=($H/run/things.db)
    ckreq || return $?

    arg="$1"
    if [[ "$arg" = "" ]]; then
        minago=`date  "+%H:%M:%S" -d '1 min ago'`
        now=`date  "+%H:%M:%S"`
        notice "List things found online"
        for res in "${(f)$(print - "SELECT * from found WHERE strftime('%H:%M:%S', last) between '$minago' and '$now';" | $sql -batch $H/run/things.db)}"; do
            [[ "$res" = "" ]] && continue
            local -A _obj
            _obj=( $(print - $res | sql_idx_parse $R/db/thing.idx) )
            warning "$_obj"
            notice "$_obj[hostname] (${_obj[os]//_/ })"
            act "$_obj[last]"
            act "$_obj[macaddr] $_obj[ip4]"
            act "$_obj[iface] $_obj[state]"
        done

    else

        act "Search '$arg' among things found"
        for res in "${(f)$(sql_search $R/db/thing.idx found "$arg")}"; do
            [[ "$res" = "" ]] && continue
            local -A _obj
            _obj=( $(print - $res | sql_idx_parse $R/db/thing.idx) )
            notice "$_obj[hostname] (${_obj[os]//_/ })"
            act "$_obj[last]"
            act "$_obj[macaddr] $_obj[ip4]"
            act "$_obj[iface] $_obj[state]"
        done

    fi
    return 0
}

dowse-scan() {
    fn dowse-scan
    freq=($H/run/leases)
    ckreq || return $?

    notice "Scanning unknown network objects"
    eval `dowse-parse-leases`

    for s in {0..${#mac}}; do
        [[ $mac[$s] == "" ]] && { continue }
        grep "${mac[$s]}" $E/network > /dev/null
        [[ $? == 1 ]] && { # unknown
            act "Running scan on ::1 ip:: (::2 host::)" ${ip[$s]} ${host[$s]}
            func "$s: nmap -A -F -sT -Pn -T5 \"${ip[$s]}\""
            nmap -A -F -sT -Pn -T5 -n "${ip[$s]}"
            print
        }
    done

}

# }}}
