#!/usr/bin/env zsh

vars+=(dnscrypt_ipaddr dnscrypt_name dnscrypt_key)

dnscrypt-proxy-conf() {
	rconf=""

	[[ -r $H/run/leases ]] && {
		# load dhcp leases in redis
		for i in ${(f)"$(cat $H/run/leases)"}; do
			rconf+="SET dns-lease-${i[(w)4]} ${i[(w)3]}\n"
			rconf+="SET dns-lease-${i[(w)4]}.dowse.it ${i[(w)3]}\n"

			# and the hosts reverses
			rconf+="SET dns-reverse-${i[(w)3]}. ${i[(w)4]}\n"

		done
	}

	[[ -r /etc/dowse/network ]] && {
		for i in ${(f)"$(cat /etc/dowse/network)"}; do

			print "$i" | grep '^#' > /dev/null
			[[ $? = 0 ]] && continue

			# first word may be a mac address
			print "${i[(w)1]}" | grep '^..:..:..:..:..:..' > /dev/null
			if [[ $? = 0 ]]; then
				mac="${i[(w)1]}"
				hostname="${i[(w)2]}"
				ip4="${i[(w)3]}"
			else
				mac=""
				hostname="${i[(w)1]}"
				ip4="${i[(w)2]}"
			fi
			rconf+="SET dns-lease-${hostname} ${ip4}\n"
			rconf+="SET dns-lease-${hostname}.dowse.it ${ip4}\n"
			func "+/etc/network: $mac $hostname $ip4"
		done
	}

	# load the local hosts known
	rconf+="SET dns-lease-${hostname}          ${address}\n"
	rconf+="SET dns-lease-${hostname}.dowse.it ${address}\n"
	rconf+="SET dns-lease-www.dowse.it         ${address}\n"
	rconf+="SET dns-lease-dowse.it             ${address}\n"
	rconf+="SET dns-lease-gateway    ${wan}\n"
	# load the local hosts reverses
	rconf+="SET dns-reverse-${address}. ${hostname}.dowse.it\n"
	rconf+="SET dns-reverse-${wan}. gateway\n"
	print $rconf | redis dynamic
}

#
# The startup of dnscrypt server is no more required, because it's responsibilty of the "pendulum > check_and_select_dns" function
# that :
#  1) search a new proxy if the oldest is undefined or no more reachable
#  2) when a new endpoint is found it's  stop + start the DNS server.
#

dnscrypt-proxy-exec() {

	args=""
	[[ $* =~ debug ]] && args+=",debug"
	[[ $* =~ offline ]] && args+=",offline"

	# grab a  server
	# dnscrypt-roundrobin

	# grab the last used server
	dnscrypt_name=$(print "GET dns-server-selected"|redis dynamic|sed 's/(nil)//')
	
	# if undefined, eg at the first startup, it takes a default value
	dnscrypt_name=${1:-dnscrypt.eu-nl}
	#dnscrypt_ipaddr=198.199.70.248:5553
	#dnscrypt_name=2.dnscrypt-cert.dyne.org
	#dnscrypt_key=162F:051A:BACA:A042:A0C9:7769:91B4:BBA8:FE10:8F72:53CB:5077:A055:9BCF:AD39:73C5

	func "Launching dnscrypt-proxy to listen on port 53"
	act "dnscrypt proxy server: $dnscrypt_name"
# TODO definire la variabile d'ambiente interface 
	if [[ $DEBUG = 1 ]]; then
		DOWSE_DOMAINLIST=`pwd`/src/domain-list/data \
						DOWSE_LAN_ADDRESS_IP4=$address \
						DOWSE_LAN_NETMASK_IP4=$netmask \
						interface=$interface \
						hostname=$hostname \
						domain=$lan \
						launch dnscrypt-proxy -a $address:53 \
						-l $H/log/dnscrypt.log \
						-L $R/share/dnscrypt-resolvers.csv \
						-R "$dnscrypt_name" \
						-X $R/lib/dnscrypt-proxy/dnscrypt_dowse.so${args},debug \
						-m 7 -u $dowse_uid
		# log level informational (7 for debug)
		return $?
    else
		pid=$H/run/dnscrypt-proxy.pid
		DOWSE_DOMAINLIST=$R/domain-list/data \
						DOWSE_LAN_ADDRESS_IP4=$address \
						DOWSE_LAN_NETMASK_IP4=$netmask \
						hostname=$hostname \
						domain=$lan \
						interface=$interface \
						launch dnscrypt-proxy -a $address:53 \
						-p $pid -l $H/log/dnscrypt.log \
						-L $R/share/dnscrypt-resolvers.csv \
						-R "$dnscrypt_name" \
						-X $R/lib/dnscrypt-proxy/dnscrypt_dowse.so${args} \
						-d -m 4 -u $dowse_uid
		# log only warning conditions

    fi

    savepid dnscrypt-proxy $pid
}

dnscrypt-roundrobin() {
	#local servertype=",.,yes,yes" ## DNSSEC + No logs
	#local servertype=",.,yes,no"  ## DNSSEC
	local servertype=",.,no,yes"  ## No logs

	func "Choosing a random available dnscrypt server"

	sed 1q $R/share/dnscrypt-resolvers.csv > $R/share/dnscrypt-resolvers-grepped.csv
	grep $servertype $R/share/dnscrypt-resolvers.csv >> $R/share/dnscrypt-resolvers-grepped.csv

	# prints a random line from the resolvers csv file
	local _rndresolv="$(perl -wne '$a = $_ if rand $. < 1 ; END { print $a }' $R/share/dnscrypt-resolvers-grepped.csv)"

	# check if alive
	eval "${execmap[dnscrypt-proxy]} -L $R/share/dnscrypt-resolvers.csv -R ${_rndresolv[(ws:,:)1]} -t 720 -m 1"

	[[ $? = 0 ]] || dnscrypt-roundrobin

	dnscrypt_name="${_rndresolv[(ws:,:)1]}"

	rm -f $R/share/dnscrypt-resolvers-grepped.csv
}

#=======================================
# Code for check DNS availability
#=======================================
__search_for_a_dns () {
    # 
    sed 1q $R/share/dnscrypt-resolvers.csv > $R/share/dnscrypt-resolvers-grepped.csv
    grep $servertype $R/share/dnscrypt-resolvers.csv >> $R/share/dnscrypt-resolvers-grepped.csv

    
    # prints a random line from the resolvers csv file
    local _rndresolv="$(perl -wne '$a = $_ if rand $. < 1 ; END { print $a }' $R/share/dnscrypt-resolvers-grepped.csv)"
    
    # check if alive
    eval "${execmap[dnscrypt-proxy]} -L $R/share/dnscrypt-resolvers.csv -R ${_rndresolv[(ws:,:)1]} -t 1 -m 1"
    
    [[ $? = 0 ]] || return 
    
    dnscrypt_name="${_rndresolv[(ws:,:)1]}"

    # Saving on redis the dnscrypt_name
    print "SET dns-server-selected ${dnscrypt_name}" | redis dynamic
    
    rm -f $R/share/dnscrypt-resolvers-grepped.csv

    PID_LIST=$(print "GET dnscrypt-pid-child-list " | redis dynamic | tr '_' ' ')

    LOCK=$(print "GET lock_check_and_select_dns " | redis dynamic )

    # in this moment we can unlock the semaphore if the pendulum spawn another team it don't change our  PID_LIST variable 
    unlock check_and_select_dns $LOCK
    kill -9 ${PID_LIST}  
    
}


__is_dns_reachable() {
    eval "${execmap[dnscrypt-proxy]} -L $R/share/dnscrypt-resolvers.csv -R $1 -t 1 -m 1"
    return $?
}

__spawn_dns_selection() {

    let N=$(grep -c processor /proc/cpuinfo )/2

    if (( $N < 1 )); then
	let N=1;
    fi
    
    for i in $(seq 1 $N); do
	search_for_a_dns &
    done
}

__save_child_pid_on_redis() {
    
    PID_LIST=`echo "${${(v)jobstates##*:*:}%=*}" | tr ' ' '_'`

    print "SET dnscrypt-pid-child-list $PID_LIST" | redis dynamic
}

dnscrypt-check_and_select_dns() {
    func ""
    func ""
    func ""
    func "entering dnscrypt-check_and_select_dns()"
    nlock=`lock check_and_select_dns 0`
    [[ "$nlock" = "0" ]] && {
	func "lock check_and_select_dns already locked"
	return 1 }
    
    #local servertype=",.,yes,yes" ## DNSSEC + No logs
    #local servertype=",.,yes,no"  ## DNSSEC
    local servertype=",.,no,yes"  ## No logs
    
    func "Check if the DNS selected on the Redis server is available"
    
    DNS=$(print "GET dns-server-selected" | redis dynamic)

    func "DNS = ${DNS} "
    if [ [ $DNS = "(nil)" ] || ! __is_dns_reachable ( $DNS ) ]; then

	print "DEL dns-server-selected" | redis dynamic
	
	func "Choosing a random available dnscrypt server"
	__spawn_dns_selection
	
	__save_child_pid_on_redis
    else
	unlock check_and_select_dns $nlock
    fi

}

